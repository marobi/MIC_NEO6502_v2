// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------------------- //
// memory_emulation_with_clock //
// --------------------------- //

#define memory_emulation_with_clock_wrap_target 0
#define memory_emulation_with_clock_wrap 12

static const uint16_t memory_emulation_with_clock_program_instructions[] = {
            //     .wrap_target
    0xfe06, //  0: set    pins, 6         side 1 [6] 
    0x4008, //  1: in     pins, 8                    
    0xe505, //  2: set    pins, 5                [5] 
    0x4018, //  3: in     pins, 24                   
    0xe403, //  4: set    pins, 3                [4] 
    0x00c8, //  5: jmp    pin, 8                     
    0x4000, //  6: in     pins, 32                   
    0x1300, //  7: jmp    0               side 0 [3] 
    0xa0eb, //  8: mov    osr, !null                 
    0x6088, //  9: out    pindirs, 8                 
    0x6008, // 10: out    pins, 8                    
    0xa0e3, // 11: mov    osr, null                  
    0x7488, // 12: out    pindirs, 8      side 0 [4] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program memory_emulation_with_clock_program = {
    .instructions = memory_emulation_with_clock_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config memory_emulation_with_clock_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + memory_emulation_with_clock_wrap_target, offset + memory_emulation_with_clock_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

void memory_emulation_with_clock_program_init(PIO pio, uint sm, uint offset) {
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);
    pio_gpio_init(pio, 2);
    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 5);
    pio_gpio_init(pio, 6);
    pio_gpio_init(pio, 7);
    pio_gpio_init(pio, 8);
    pio_gpio_init(pio, 9);
    pio_gpio_init(pio, 10);
    pio_gpio_init(pio, 21);
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 8, false);
    pio_sm_set_consecutive_pindirs(pio, sm, 8, 3, true);
    pio_sm_set_consecutive_pindirs(pio, sm, 21, 1, true);
    pio_sm_config c = memory_emulation_with_clock_program_get_default_config(offset);
    sm_config_set_set_pins(&c, 8, 3);
    sm_config_set_in_pins(&c, 0);
    sm_config_set_out_pins(&c, 0, 8);
    sm_config_set_sideset_pins(&c, 21);
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_jmp_pin(&c, 11);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

